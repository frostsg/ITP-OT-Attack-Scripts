from pymodbus.client import ModbusTcpClient
import time

# Define the IP and port of the Modbus server
ip_address = '192.168.30.3'
port = 502

# Define the register addresses for PH_Level and Chlorine_Level
ph_level_address = 1  # %QW101.1
chlorine_level_address = 0  # %QW100.1

# Values to be written to the registers
ph_level_value = 100  # Example value for PH_Level
chlorine_level_value = 10  # Example value for Chlorine_Level

# Initialize the Modbus TCP client
client = ModbusTcpClient(ip_address, port)

while True:
    # Connect to the Modbus server
    if client.connect():
        # # Write value to the PH_Level register
        # response_ph = client.write_register(ph_level_address, ph_level_value)
        # if response_ph.isError():
        #     print(f"Error writing to PH_Level register at address {ph_level_address}")
        # else:
        #     print(f"PH_Level successfully set to {ph_level_value} at address {ph_level_address}")

        # Write value to the Chlorine_Level register
        response_chlorine = client.write_register(chlorine_level_address, chlorine_level_value)
        if response_chlorine.isError():
            print(f"Error writing to Chlorine_Level register at address {chlorine_level_address}")
        else:
            print(f"Chlorine_Level successfully set to {chlorine_level_value} at address {chlorine_level_address}")

        # read_ph = client.read_holding_registers(ph_level_address, 1)
        # if read_ph.isError():
        #     print(f"Error reading PH_Level register at address {ph_level_address}")
        # else:
        #     actual_ph_level = read_ph.registers[0]
        #     print(f"PH_Level read back as {actual_ph_level}")
        
        # # Check if the warning light should be on based on the PH level
        # if actual_ph_level > 7:
        #     print("PH Level is above 7, warning light should be on.")
        # else:
        #     print("PH Level is 7 or below, warning light should be off.")

    else:
        print("Unable to connect to the Modbus server")
